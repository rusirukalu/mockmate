// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- NextAuth required tables ----------

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  name             String?
  sessions         Session[]
  progress         Progress?
  accounts         Account[]
  practiceSessions PracticeSession[] // Opposite relation field added
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- App-specific tables ----------

model Question {
  id         String   @id @default(uuid())
  text       String
  category   String
  difficulty String
  type       String // "behavioral", "technical", etc
  createdAt  DateTime @default(now())
}

model Progress {
  id            String @id @default(uuid())
  user          User   @relation(fields: [userId], references: [id])
  userId        String @unique
  totalSessions Int    @default(0)
  avgTime       Int    @default(0)
}

// App-specific Session (rename if wanted to InterviewSession, etc)
model PracticeSession {
  id           String   @id @default(uuid())
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
  questionIds  String // Comma-separated for simplicity
  duration     Int // Seconds
  recordingUrl String? // Vercel Blob URL
  createdAt    DateTime @default(now())
}
